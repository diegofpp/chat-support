// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relaciones
  tickets       Ticket[]  @relation("UserTickets")
  assignedTickets Ticket[] @relation("AssignedTickets")
  messages      Message[]
  videos        Video[]

  @@map("users")
}

// Modelo de Ticket
model Ticket {
  id          String    @id @default(cuid())
  title       String
  description String
  status      TicketStatus @default(OPEN)
  priority    Priority    @default(MEDIUM)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relaciones
  userId      String
  user        User      @relation("UserTickets", fields: [userId], references: [id])
  assignedToId String?
  assignedTo  User?     @relation("AssignedTickets", fields: [assignedToId], references: [id])
  messages    Message[]
  videos      Video[]

  @@map("tickets")
}

// Modelo de Mensaje
model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])

  @@map("messages")
}

// Modelo de Video
model Video {
  id        String   @id @default(cuid())
  url       String
  filename  String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])

  @@map("videos")
}

// Enums
enum Role {
  USER
  TECHNICIAN
  ADMIN
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_USER
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
