generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            Role      @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  messages        Message[]
  assignedTickets Ticket[]  @relation("AssignedTickets")
  tickets         Ticket[]  @relation("UserTickets")
  videos          Video[]

  @@map("users")
}

model Ticket {
  id           String       @id @default(cuid())
  title        String
  description  String
  status       TicketStatus @default(OPEN)
  priority     Priority     @default(MEDIUM)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String
  assignedToId String?
  messages     Message[]
  assignedTo   User?        @relation("AssignedTickets", fields: [assignedToId], references: [id])
  user         User         @relation("UserTickets", fields: [userId], references: [id])
  videos       Video[]

  @@map("tickets")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("messages")
}

model Video {
  id        String   @id @default(cuid())
  url       String
  filename  String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("videos")
}

enum Role {
  USER
  TECHNICIAN
  ADMIN
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_FOR_USER
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
